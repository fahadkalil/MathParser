Grammar:

Rule 0     S' -> statement
Rule 1     statement -> expr
Rule 2     statement -> ID = expr
Rule 3     expr -> ID INC
Rule 4     expr -> ID
Rule 5     expr -> NUMBER
Rule 6     expr -> ( expr )
Rule 7     expr -> - expr  [precedence=right, level=4]
Rule 8     expr -> expr EQ expr  [precedence=left, level=1]
Rule 9     expr -> expr / expr  [precedence=left, level=3]
Rule 10    expr -> expr * expr  [precedence=left, level=3]
Rule 11    expr -> expr - expr  [precedence=left, level=2]
Rule 12    expr -> expr + expr  [precedence=left, level=2]

Unused terminals:

    FALSO
    VDD
    QUIT

Terminals, with rules where they appear:

(                    : 6
)                    : 6
*                    : 10
+                    : 12
-                    : 7 11
/                    : 9
=                    : 2
EQ                   : 8
FALSO                : 
ID                   : 2 3 4
INC                  : 3
NUMBER               : 5
QUIT                 : 
VDD                  : 
error                : 

Nonterminals, with rules where they appear:

expr                 : 1 2 6 7 8 8 9 9 10 10 11 11 12 12
statement            : 0


state 0

    (0) S' -> . statement
    (1) statement -> . expr
    (2) statement -> . ID = expr
    (3) expr -> . ID INC
    (4) expr -> . ID
    (5) expr -> . NUMBER
    (6) expr -> . ( expr )
    (7) expr -> . - expr
    (8) expr -> . expr EQ expr
    (9) expr -> . expr / expr
    (10) expr -> . expr * expr
    (11) expr -> . expr - expr
    (12) expr -> . expr + expr
    ID              shift and go to state 3
    NUMBER          shift and go to state 4
    (               shift and go to state 5
    -               shift and go to state 6

    statement                      shift and go to state 1
    expr                           shift and go to state 2

state 1

    (0) S' -> statement .


state 2

    (1) statement -> expr .
    (8) expr -> expr . EQ expr
    (9) expr -> expr . / expr
    (10) expr -> expr . * expr
    (11) expr -> expr . - expr
    (12) expr -> expr . + expr
    $end            reduce using rule 1 (statement -> expr .)
    EQ              shift and go to state 7
    /               shift and go to state 8
    *               shift and go to state 9
    -               shift and go to state 10
    +               shift and go to state 11


state 3

    (2) statement -> ID . = expr
    (3) expr -> ID . INC
    (4) expr -> ID .
    =               shift and go to state 12
    INC             shift and go to state 13
    EQ              reduce using rule 4 (expr -> ID .)
    /               reduce using rule 4 (expr -> ID .)
    *               reduce using rule 4 (expr -> ID .)
    -               reduce using rule 4 (expr -> ID .)
    +               reduce using rule 4 (expr -> ID .)
    $end            reduce using rule 4 (expr -> ID .)


state 4

    (5) expr -> NUMBER .
    EQ              reduce using rule 5 (expr -> NUMBER .)
    /               reduce using rule 5 (expr -> NUMBER .)
    *               reduce using rule 5 (expr -> NUMBER .)
    -               reduce using rule 5 (expr -> NUMBER .)
    +               reduce using rule 5 (expr -> NUMBER .)
    $end            reduce using rule 5 (expr -> NUMBER .)
    )               reduce using rule 5 (expr -> NUMBER .)


state 5

    (6) expr -> ( . expr )
    (3) expr -> . ID INC
    (4) expr -> . ID
    (5) expr -> . NUMBER
    (6) expr -> . ( expr )
    (7) expr -> . - expr
    (8) expr -> . expr EQ expr
    (9) expr -> . expr / expr
    (10) expr -> . expr * expr
    (11) expr -> . expr - expr
    (12) expr -> . expr + expr
    ID              shift and go to state 15
    NUMBER          shift and go to state 4
    (               shift and go to state 5
    -               shift and go to state 6

    expr                           shift and go to state 14

state 6

    (7) expr -> - . expr
    (3) expr -> . ID INC
    (4) expr -> . ID
    (5) expr -> . NUMBER
    (6) expr -> . ( expr )
    (7) expr -> . - expr
    (8) expr -> . expr EQ expr
    (9) expr -> . expr / expr
    (10) expr -> . expr * expr
    (11) expr -> . expr - expr
    (12) expr -> . expr + expr
    ID              shift and go to state 15
    NUMBER          shift and go to state 4
    (               shift and go to state 5
    -               shift and go to state 6

    expr                           shift and go to state 16

state 7

    (8) expr -> expr EQ . expr
    (3) expr -> . ID INC
    (4) expr -> . ID
    (5) expr -> . NUMBER
    (6) expr -> . ( expr )
    (7) expr -> . - expr
    (8) expr -> . expr EQ expr
    (9) expr -> . expr / expr
    (10) expr -> . expr * expr
    (11) expr -> . expr - expr
    (12) expr -> . expr + expr
    ID              shift and go to state 15
    NUMBER          shift and go to state 4
    (               shift and go to state 5
    -               shift and go to state 6

    expr                           shift and go to state 17

state 8

    (9) expr -> expr / . expr
    (3) expr -> . ID INC
    (4) expr -> . ID
    (5) expr -> . NUMBER
    (6) expr -> . ( expr )
    (7) expr -> . - expr
    (8) expr -> . expr EQ expr
    (9) expr -> . expr / expr
    (10) expr -> . expr * expr
    (11) expr -> . expr - expr
    (12) expr -> . expr + expr
    ID              shift and go to state 15
    NUMBER          shift and go to state 4
    (               shift and go to state 5
    -               shift and go to state 6

    expr                           shift and go to state 18

state 9

    (10) expr -> expr * . expr
    (3) expr -> . ID INC
    (4) expr -> . ID
    (5) expr -> . NUMBER
    (6) expr -> . ( expr )
    (7) expr -> . - expr
    (8) expr -> . expr EQ expr
    (9) expr -> . expr / expr
    (10) expr -> . expr * expr
    (11) expr -> . expr - expr
    (12) expr -> . expr + expr
    ID              shift and go to state 15
    NUMBER          shift and go to state 4
    (               shift and go to state 5
    -               shift and go to state 6

    expr                           shift and go to state 19

state 10

    (11) expr -> expr - . expr
    (3) expr -> . ID INC
    (4) expr -> . ID
    (5) expr -> . NUMBER
    (6) expr -> . ( expr )
    (7) expr -> . - expr
    (8) expr -> . expr EQ expr
    (9) expr -> . expr / expr
    (10) expr -> . expr * expr
    (11) expr -> . expr - expr
    (12) expr -> . expr + expr
    ID              shift and go to state 15
    NUMBER          shift and go to state 4
    (               shift and go to state 5
    -               shift and go to state 6

    expr                           shift and go to state 20

state 11

    (12) expr -> expr + . expr
    (3) expr -> . ID INC
    (4) expr -> . ID
    (5) expr -> . NUMBER
    (6) expr -> . ( expr )
    (7) expr -> . - expr
    (8) expr -> . expr EQ expr
    (9) expr -> . expr / expr
    (10) expr -> . expr * expr
    (11) expr -> . expr - expr
    (12) expr -> . expr + expr
    ID              shift and go to state 15
    NUMBER          shift and go to state 4
    (               shift and go to state 5
    -               shift and go to state 6

    expr                           shift and go to state 21

state 12

    (2) statement -> ID = . expr
    (3) expr -> . ID INC
    (4) expr -> . ID
    (5) expr -> . NUMBER
    (6) expr -> . ( expr )
    (7) expr -> . - expr
    (8) expr -> . expr EQ expr
    (9) expr -> . expr / expr
    (10) expr -> . expr * expr
    (11) expr -> . expr - expr
    (12) expr -> . expr + expr
    ID              shift and go to state 15
    NUMBER          shift and go to state 4
    (               shift and go to state 5
    -               shift and go to state 6

    expr                           shift and go to state 22

state 13

    (3) expr -> ID INC .
    EQ              reduce using rule 3 (expr -> ID INC .)
    /               reduce using rule 3 (expr -> ID INC .)
    *               reduce using rule 3 (expr -> ID INC .)
    -               reduce using rule 3 (expr -> ID INC .)
    +               reduce using rule 3 (expr -> ID INC .)
    $end            reduce using rule 3 (expr -> ID INC .)
    )               reduce using rule 3 (expr -> ID INC .)


state 14

    (6) expr -> ( expr . )
    (8) expr -> expr . EQ expr
    (9) expr -> expr . / expr
    (10) expr -> expr . * expr
    (11) expr -> expr . - expr
    (12) expr -> expr . + expr
    )               shift and go to state 23
    EQ              shift and go to state 7
    /               shift and go to state 8
    *               shift and go to state 9
    -               shift and go to state 10
    +               shift and go to state 11


state 15

    (3) expr -> ID . INC
    (4) expr -> ID .
    INC             shift and go to state 13
    )               reduce using rule 4 (expr -> ID .)
    EQ              reduce using rule 4 (expr -> ID .)
    /               reduce using rule 4 (expr -> ID .)
    *               reduce using rule 4 (expr -> ID .)
    -               reduce using rule 4 (expr -> ID .)
    +               reduce using rule 4 (expr -> ID .)
    $end            reduce using rule 4 (expr -> ID .)


state 16

    (7) expr -> - expr .
    (8) expr -> expr . EQ expr
    (9) expr -> expr . / expr
    (10) expr -> expr . * expr
    (11) expr -> expr . - expr
    (12) expr -> expr . + expr
    EQ              reduce using rule 7 (expr -> - expr .)
    /               reduce using rule 7 (expr -> - expr .)
    *               reduce using rule 7 (expr -> - expr .)
    -               reduce using rule 7 (expr -> - expr .)
    +               reduce using rule 7 (expr -> - expr .)
    $end            reduce using rule 7 (expr -> - expr .)
    )               reduce using rule 7 (expr -> - expr .)


state 17

    (8) expr -> expr EQ expr .
    (8) expr -> expr . EQ expr
    (9) expr -> expr . / expr
    (10) expr -> expr . * expr
    (11) expr -> expr . - expr
    (12) expr -> expr . + expr
    EQ              reduce using rule 8 (expr -> expr EQ expr .)
    $end            reduce using rule 8 (expr -> expr EQ expr .)
    )               reduce using rule 8 (expr -> expr EQ expr .)
    /               shift and go to state 8
    *               shift and go to state 9
    -               shift and go to state 10
    +               shift and go to state 11


state 18

    (9) expr -> expr / expr .
    (8) expr -> expr . EQ expr
    (9) expr -> expr . / expr
    (10) expr -> expr . * expr
    (11) expr -> expr . - expr
    (12) expr -> expr . + expr
    EQ              reduce using rule 9 (expr -> expr / expr .)
    /               reduce using rule 9 (expr -> expr / expr .)
    *               reduce using rule 9 (expr -> expr / expr .)
    -               reduce using rule 9 (expr -> expr / expr .)
    +               reduce using rule 9 (expr -> expr / expr .)
    $end            reduce using rule 9 (expr -> expr / expr .)
    )               reduce using rule 9 (expr -> expr / expr .)


state 19

    (10) expr -> expr * expr .
    (8) expr -> expr . EQ expr
    (9) expr -> expr . / expr
    (10) expr -> expr . * expr
    (11) expr -> expr . - expr
    (12) expr -> expr . + expr
    EQ              reduce using rule 10 (expr -> expr * expr .)
    /               reduce using rule 10 (expr -> expr * expr .)
    *               reduce using rule 10 (expr -> expr * expr .)
    -               reduce using rule 10 (expr -> expr * expr .)
    +               reduce using rule 10 (expr -> expr * expr .)
    $end            reduce using rule 10 (expr -> expr * expr .)
    )               reduce using rule 10 (expr -> expr * expr .)


state 20

    (11) expr -> expr - expr .
    (8) expr -> expr . EQ expr
    (9) expr -> expr . / expr
    (10) expr -> expr . * expr
    (11) expr -> expr . - expr
    (12) expr -> expr . + expr
    EQ              reduce using rule 11 (expr -> expr - expr .)
    -               reduce using rule 11 (expr -> expr - expr .)
    +               reduce using rule 11 (expr -> expr - expr .)
    $end            reduce using rule 11 (expr -> expr - expr .)
    )               reduce using rule 11 (expr -> expr - expr .)
    /               shift and go to state 8
    *               shift and go to state 9


state 21

    (12) expr -> expr + expr .
    (8) expr -> expr . EQ expr
    (9) expr -> expr . / expr
    (10) expr -> expr . * expr
    (11) expr -> expr . - expr
    (12) expr -> expr . + expr
    EQ              reduce using rule 12 (expr -> expr + expr .)
    -               reduce using rule 12 (expr -> expr + expr .)
    +               reduce using rule 12 (expr -> expr + expr .)
    $end            reduce using rule 12 (expr -> expr + expr .)
    )               reduce using rule 12 (expr -> expr + expr .)
    /               shift and go to state 8
    *               shift and go to state 9


state 22

    (2) statement -> ID = expr .
    (8) expr -> expr . EQ expr
    (9) expr -> expr . / expr
    (10) expr -> expr . * expr
    (11) expr -> expr . - expr
    (12) expr -> expr . + expr
    $end            reduce using rule 2 (statement -> ID = expr .)
    EQ              shift and go to state 7
    /               shift and go to state 8
    *               shift and go to state 9
    -               shift and go to state 10
    +               shift and go to state 11


state 23

    (6) expr -> ( expr ) .
    EQ              reduce using rule 6 (expr -> ( expr ) .)
    /               reduce using rule 6 (expr -> ( expr ) .)
    *               reduce using rule 6 (expr -> ( expr ) .)
    -               reduce using rule 6 (expr -> ( expr ) .)
    +               reduce using rule 6 (expr -> ( expr ) .)
    $end            reduce using rule 6 (expr -> ( expr ) .)
    )               reduce using rule 6 (expr -> ( expr ) .)
